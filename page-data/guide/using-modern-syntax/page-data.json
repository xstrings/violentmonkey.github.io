{"componentChunkName":"component---src-templates-post-template-js","path":"/guide/using-modern-syntax/","result":{"data":{"site":{"siteMetadata":{"title":"Violentmonkey"}},"markdownRemark":{"id":"e24a4752-6ffe-5aa7-b52c-2d69603f6c7e","html":"<p>A userscript runs in a browser, so it can only contain syntax that is supported by the browser.</p>\n<p>Violentmonkey itself is built for modern browsers, to be precise, for Chrome >= 55 and Firefox >= 53. So if your browser has Violentmonkey, it is likely it also supports many ES6 features natively, for example, arrow functions (<code class=\"language-text\">=&gt;</code>), Promises, block-scoped variables, template literals (<code class=\"language-text\">`hello, ${name}`</code>), etc.</p>\n<p>However, there are many more cool features that are not fully supported by browsers, e.g. optional chaining.</p>\n<p>In this tutorial we are going to create a project to compile ESNext and other modern syntax to browser compliant code.</p>\n<h2 id=\"prequisite\" style=\"position:relative;\"><a href=\"#prequisite\" aria-label=\"prequisite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prequisite</h2>\n<ul>\n<li>Make sure you have Node.js >= v10.0 installed.</li>\n</ul>\n<h2 id=\"initialization\" style=\"position:relative;\"><a href=\"#initialization\" aria-label=\"initialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initialization</h2>\n<p>Thanks to <code class=\"language-text\">npx</code>, we can generate the new project with a one-line command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> my-script\n$ <span class=\"token builtin class-name\">cd</span> my-script\n$ npx -p https://github.com/violentmonkey/generator-userscript.git -p yo yo @violentmonkey/userscript</code></pre></div>\n<p>Under the hood, we are using Yeoman to create a project with JavaScript toolchain, compiling source code with Babel, and bundling them with Rollup.</p>\n<h2 id=\"development\" style=\"position:relative;\"><a href=\"#development\" aria-label=\"development permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Development</h2>\n<p>Now we should get a project with following structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── dist\n├── src\n│  ├── app.js\n│  ├── index.js\n│  ├── meta.js\n│  └── style.module.css\n├── .babelrc.js\n├── .eslintrc.js\n├── package.json\n└── README.md</code></pre></div>\n<p>Source code files are kept in <code class=\"language-text\">src</code>, and will be compiled to <code class=\"language-text\">dist/index.user.js</code>.</p>\n<p><code class=\"language-text\">src/meta.js</code> contains the metadata of our script, see <a href=\"/api/metadata-block/\">Metadata Block</a> for more details.</p>\n<p><code class=\"language-text\">src/index.js</code> is the entrance of our script, other files in <code class=\"language-text\">src</code> can be imported.</p>\n<h3 id=\"compiling-and-watching\" style=\"position:relative;\"><a href=\"#compiling-and-watching\" aria-label=\"compiling and watching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compiling and Watching</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> dev\n<span class=\"token comment\"># or</span>\n$ <span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>Source code will be watched by the compiler and compiled to <code class=\"language-text\">dist</code> once changed.</p>\n<p>By installing the compiled userscript from <code class=\"language-text\">dist</code>, we can test and keep up with the latest code of our userscript. See also <a href=\"/posts/how-to-edit-scripts-with-your-favorite-editor/\">How to edit scripts with your favorite editor</a>.</p>\n<h3 id=\"building\" style=\"position:relative;\"><a href=\"#building\" aria-label=\"building permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> build\n<span class=\"token comment\"># or</span>\n$ <span class=\"token function\">npm</span> run build</code></pre></div>\n<p>In this way the source code will be compiled exactly once, and saved in <code class=\"language-text\">dist</code>.</p>\n<p>The version of our userscript will be synced with that in <code class=\"language-text\">package.json</code>.</p>\n<h2 id=\"features\" style=\"position:relative;\"><a href=\"#features\" aria-label=\"features permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features</h2>\n<p>With Babel and plenty of plugins, we can easily use cool ESNext features. All features included in <a href=\"https://babeljs.io/docs/en/babel-preset-env\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@babel/preset-env</a> are supported.</p>\n<h3 id=\"jsx\" style=\"position:relative;\"><a href=\"#jsx\" aria-label=\"jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX</h3>\n<p><a href=\"https://facebook.github.io/jsx/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSX</a> is usually bound with React, compiled to React Nodes. However, we can port the syntax to DOM and simplify our DOM operations, which is exactly what <a href=\"https://github.com/violentmonkey/vm-dom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@violentmonkey/dom</a> does.</p>\n<p>To use JSX, we need to require a JSX runtime first. Add this in <code class=\"language-text\">src/meta.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ==UserScript==</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// @require https://cdn.jsdelivr.net/npm/@violentmonkey/dom@1</span></span><span class=\"token comment\">// ==/UserScript==</span></code></pre></div>\n<p>Then we can operate DOM elements easily:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello<span class=\"token punctuation\">,</span> world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"css\" style=\"position:relative;\"><a href=\"#css\" aria-label=\"css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS</h3>\n<p>CSS in this project will be handled by <a href=\"https://github.com/egoist/rollup-plugin-postcss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rollup-plugin-postcss</a>, enhanced by <a href=\"https://github.com/jonathantneal/precss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PreCSS</a>. In other words, Sass-like markup and staged CSS features are supported in <code class=\"language-text\">src/**/*.css</code>.</p>\n<p>Compiled CSS string can be imported:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// global CSS</span>\n<span class=\"token keyword\">import</span> globalCss <span class=\"token keyword\">from</span> <span class=\"token string\">'./style.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstyle<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> globalCss<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or use with JSX</span>\ndocument<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>globalCss<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"css-modules\" style=\"position:relative;\"><a href=\"#css-modules\" aria-label=\"css modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Modules</h3>\n<p>CSS modules is enabled automatically for <code class=\"language-text\">src/**/*.module.css</code>. When importing from a <code class=\"language-text\">.module.css</code> file, we get an object as default export, mapping from original class names to hashed class names. The CSS string is imported from a named export <code class=\"language-text\">stylesheet</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CSS modules</span>\n<span class=\"token keyword\">import</span> styles<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> stylesheet <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./style.module.css'</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>stylesheet<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>hello<span class=\"token punctuation\">,</span> world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* style.module.css */</span>\n<span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"tailwindcss\" style=\"position:relative;\"><a href=\"#tailwindcss\" aria-label=\"tailwindcss permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TailwindCSS</h3>\n<p><a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TailwindCSS</a> is enabled by default, so you can easily compose classes to build your own CSS.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@apply</span> bg-gray-200<span class=\"token punctuation\">;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, we are building a userscript which should not pollute the global context too much, so we should not use TailwindCSS classes directly in JavaScript or HTML templates.</p>\n<h2 id=\"recap\" style=\"position:relative;\"><a href=\"#recap\" aria-label=\"recap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap</h2>\n<p>Thanks to Babel and Rollup, we can use a lot of modern features in a userscript:</p>\n<ul>\n<li>ESNext features</li>\n<li>React-like JSX syntax</li>\n<li>Sass-like CSS features</li>\n<li>CSS modules</li>\n<li>TailwindCSS</li>\n</ul>","fields":{"tagSlugs":null,"type":"pages"},"frontmatter":{"title":"How to use modern syntax in a userscript","tags":null,"date":"2020-03-08 23:31:12+0800","sidebar":{"match":"/guide/","order":1}},"tableOfContents":"<ul>\n<li><a href=\"/guide/using-modern-syntax/#prequisite\">Prequisite</a></li>\n<li><a href=\"/guide/using-modern-syntax/#initialization\">Initialization</a></li>\n<li>\n<p><a href=\"/guide/using-modern-syntax/#development\">Development</a></p>\n<ul>\n<li><a href=\"/guide/using-modern-syntax/#compiling-and-watching\">Compiling and Watching</a></li>\n<li><a href=\"/guide/using-modern-syntax/#building\">Building</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/guide/using-modern-syntax/#features\">Features</a></p>\n<ul>\n<li><a href=\"/guide/using-modern-syntax/#jsx\">JSX</a></li>\n<li><a href=\"/guide/using-modern-syntax/#css\">CSS</a></li>\n<li><a href=\"/guide/using-modern-syntax/#css-modules\">CSS Modules</a></li>\n<li><a href=\"/guide/using-modern-syntax/#tailwindcss\">TailwindCSS</a></li>\n</ul>\n</li>\n<li><a href=\"/guide/using-modern-syntax/#recap\">Recap</a></li>\n</ul>"}},"pageContext":{"slug":"/guide/using-modern-syntax/","type":"pages"}},"staticQueryHashes":["1878747374","2176765690","2344890832","3202921338","3365866253"]}